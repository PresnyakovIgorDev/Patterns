using System;

namespace Patterns.Structural.Proxy
{
    /// <summary>
    /// Паттерн Заместитель (Proxy) предоставляет объект-заместитель, который управляет доступом к другому объекту. То есть создается объект-суррогат, который может выступать в роли другого объекта и замещать его.
    /// Ленивая инициализация (виртуальный прокси)
    /// Защита доступа (защищающий прокси). Когда в программе есть разные типы пользователей, и вам хочется защищать объект от неавторизованного доступа. Например, если ваши объекты — это важная часть операционной системы, а пользователи — сторонние программы (хорошие или вредоносные).
    ///  Локальный запуск сервиса (удалённый прокси). Когда настоящий сервисный объект находится на удалённом сервере.
    ///  В этом случае заместитель транслирует запросы клиента в вызовы по сети в протоколе, понятном удалённому сервису.
    /// Логирование запросов (логирующий прокси). Когда требуется хранить историю обращений к сервисному объекту.
    ///  Кеширование объектов («умная» ссылка). Когда нужно кешировать результаты запросов клиентов и управлять их жизненным циклом.
    /// </summary>
    public class ProxyObject : Subject
    {
        private Subject _subject;

        public ProxyObject(Subject subject)
        {
            _subject = subject;
        }
        
        public override void Execute()
        {
            Console.WriteLine("Выполнение будет начато");
            _subject.Execute();
            Console.WriteLine("Выполнение закончено");
        }
    }
}